syntax = "proto3";
package pool;

import "google/protobuf/empty.proto";

service PoolGame {
    rpc CreateRoom(google.protobuf.Empty) returns (RoomCreation) {} //creates a room
    rpc JoinRoom (RoomID) returns (RoomJoin) {} //joins a already created room
    rpc GetRoom(RoomID) returns (Room) {} //gets information about a room
    rpc SetPlayerInfo (AuthedPlayerInRoom) returns (google.protobuf.Empty) {} //sets the info about yourself (auth is needed) i.e. name
    rpc StartGame(AuthedPlayerInRoom) returns (google.protobuf.Empty) {}

    rpc GetTurnId(RoomID) returns (TurnId) {} //gets current turn id
    rpc PostTurn(Turn) returns (google.protobuf.Empty) {} //posts the moves you made on your turn
    rpc GetPreviousTurn (RoomID) returns (Turn) {} //gets the move made on the previous turn.
}

message TurnId {
    int32 turn_id = 1;
}

message AuthedPlayerInRoom {
    RoomID room_id = 1;
    AuthedPlayer authed_player = 2;
}

message RoomCreation {
    RoomID room_id = 1;
    PlayerToken player_token = 2; //at least right now, players will not need to make accounts so tokens will be given to players for auth
}

message RoomJoin {
    PlayerToken player_token = 1;
}

message RoomID {
    string room_code = 1;
}

message PlayerToken {
    string player_token = 1;
}

message Player {
    int32 player_id = 1;
    string name = 2;
}

message AuthedPlayer {
    int32 player_id = 1;
    string name = 2;
    PlayerToken player_token = 3;
}

message Room {
    RoomID room_id = 1;
    string room_name = 2;
    repeated Player players = 3;
    bool game_started = 4;
}

message Ball {
    repeated float pos = 1;
    repeated float vel = 2;
    bool in_play = 3;
    int32 index = 4;
}

message Turn {
    repeated Move moves = 1; //repeated to allow multiple actions in one turn (happens if the cue ball goes in the hole or if you hit the ball mutliple times)
    RoomID room_id = 2;
    int32 player_id = 3;
    PlayerToken player_token = 4;
}

message Move {
    MoveType type = 1;
    StrikeMove strike_move = 2;
    PlaceMove place_move = 3;
}

message StrikeMove {
    repeated float vel = 1; //new velocity of the cue ball
}

message PlaceMove {
    repeated float pos = 1; //position the cue ball was placed
}

enum MoveType {
    Strike = 0; //hit the cue ball
    Place = 1; //place the cue ball somewhere
}